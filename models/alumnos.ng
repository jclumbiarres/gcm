package main

import (
	"log"
	"time"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var DB *gorm.DB

type Alumno struct {
	gorm.Model
	Nombre      string
	FechaInicio time.Time
	FechaFin    time.Time
	FIniStr     string `gorm:"-"`
	FFinStr     string `gorm:"-"`
	Activo      bool
	Comentario  string
	Sprints     []Sprint
}

type Sprint struct {
	gorm.Model
	AlumnoID    uint
	Alumno      Alumno
	Numero      int
	Nombre      string
	FechaInicio time.Time
	FechaFin    time.Time
	FechaCorre  time.Time
	Nota        float32
	Activo      bool
	Completado  bool
	Comentario  string
	FIniStr     string `gorm:"-"`
	FFinStr     string `gorm:"-"`
	FCorStr     string `gorm:"-"`
}

func (a Alumno) GetAlumnos() (alumnos []Alumno) {
	DB.Preload("Sprints").Find(&alumnos)
	return alumnos
}

func (a Alumno) GetSprintById(id int, alumnoid int) (sprint Sprint, err error) {
	err = DB.Where("id = ? AND alumno_id = ?", id, alumnoid).First(&sprint).Error
	if err != nil {
		return sprint, err
	}
	return sprint, nil
}

func (a *Alumno) BuscarAlumnoConSprints() (err error) {
	err = DB.Preload("Sprints").First(a).Error
	return
}

func main() {
	var err error
	DB, err = gorm.Open(sqlite.Open("datos.sqlite"), &gorm.Config{})
	if err != nil {
		panic("Fallo al conectarse a la base de datos")
	}
	DB.AutoMigrate(&Alumno{}, &Sprint{})
	CrearAlumno()
}

func CrearAlumno() {
	bananas := &Alumno{
		Nombre:      "Joe Bananas",
		FechaInicio: time.Now(),
		FechaFin:    time.Now().Add(24 * time.Hour * 7),
		Activo:      true,
		Comentario:  "Abuelete",
	}
	bananas.CrearAlumno()
	log.Println("Modificamos el pu√±etero sprint 3")

	salida, err := BuscarAlumnoTransaccional("Joe Bananas")
	if err != nil {
		log.Println(err)
	}
	ModificarSprint("Joe Bananas")
	salida, err = BuscarAlumnoTransaccional("Joe Bananas")
	if err != nil {
		log.Println(err)
	}
	salida, err = BuscarAlumnoTransaccional("Joe Bananas")
	if err != nil {
		log.Println(err)
	}
	salida.ModificarComentario("Comentario modificado")
	a := Alumno{}.GetAlumnos()

	log.Println(a)

}

func ModificarSprint(nombre string) {
	var alumno Alumno
	if err := DB.Where("nombre = ?", nombre).Preload("Sprints").First(&alumno).Error; err != nil {
		panic(err)
	}

	err := DB.Transaction(func(tx *gorm.DB) error {
		for i := range alumno.Sprints {
			if alumno.Sprints[i].Numero == 5 {
				alumno.Sprints[i].Completado = true
				alumno.Sprints[i].Activo = false
				alumno.Sprints[i].Comentario = "Completado"
				alumno.Sprints[i].Nota = 10
				alumno.Sprints[i].FechaCorre = time.Now()
				if err := tx.Save(&alumno.Sprints[i]).Error; err != nil {
					return err
				}
				break
			}
		}
		return nil
	})

	if err != nil {
		panic(err)
	}
}

func (a *Alumno) ModificarComentario(comentario string) (err error) {
	err = DB.Transaction(func(tx *gorm.DB) error {
		if err := tx.Model(&a).Update("comentario", comentario).Error; err != nil {
			return err
		}
		return nil
	})
	return err
}

func BuscarAlumnoTransaccional(nombre string) (alumno Alumno, err error) {
	err = DB.Transaction(func(tx *gorm.DB) error {
		if err := tx.Where("nombre = ?", nombre).Preload("Sprints").First(&alumno).Error; err != nil {
			return err
		}
		return nil
	})
	return alumno, err
}

func (a *Alumno) CrearAlumno() (err error) {
	err = DB.Transaction(func(tx *gorm.DB) error {
		a.Sprints = append(a.Sprints, Sprint{
			Numero:      1,
			Nombre:      "Sprint 1",
			FechaInicio: time.Now(),
			FechaFin:    time.Now().Add(24 * time.Hour * 7),
			FechaCorre:  time.Now().Add(24 * time.Hour * 7),
			Nota:        0,
			Activo:      true,
			Completado:  false,
			Comentario:  "En curso",
		}, Sprint{
			Numero:     2,
			Nombre:     "Sprint 2",
			Nota:       0,
			Activo:     false,
			Completado: false,
			Comentario: "",
		}, Sprint{
			Numero:     3,
			Nombre:     "Sprint 3",
			Nota:       0,
			Activo:     false,
			Completado: false,
			Comentario: "",
		}, Sprint{
			Numero:     9,
			Nombre:     "Prueba Nivel",
			Nota:       0,
			Activo:     false,
			Completado: false,
			Comentario: "",
		}, Sprint{
			Numero:     4,
			Nombre:     "Sprint 4",
			Nota:       0,
			Activo:     false,
			Completado: false,
			Comentario: "",
		}, Sprint{
			Numero:     5,
			Nombre:     "Sprint 5",
			Nota:       0,
			Activo:     false,
			Completado: false,
			Comentario: "",
		}, Sprint{
			Numero:     6,
			Nombre:     "Sprint 6",
			Nota:       0,
			Activo:     false,
			Completado: false,
			Comentario: "",
		}, Sprint{
			Numero:     7,
			Nombre:     "Sprint 7",
			Nota:       0,
			Activo:     false,
			Completado: false,
			Comentario: "",
		}, Sprint{
			Numero:     8,
			Nombre:     "Sprint 8",
			Nota:       0,
			Activo:     false,
			Completado: false,
			Comentario: "",
		})

		if err := tx.Create(a).Error; err != nil {
			return err
		}

		return nil
	})

	return
}
